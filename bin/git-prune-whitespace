#!/bin/bash -O extglob

# Executable preamble
mydir="$(dirname $0)"
pushd "$mydir/.." > /dev/null; dotfiles="$(pwd)"; popd > /dev/null
libdir="${dotfiles}/lib"

# Imports
. "${libdir}/Lib.sh"
. "${libdir}/Module.sh"
. "${libdir}/CLI.sh"
. "${libdir}/Git.sh"

# Usage
GIT_PARSEOPT_SPEC="\
git-prune-whitespace FILE FILE FILE ...

Trims trailing whitespace from FILEs provided. If no files are provided,
operates on all files tracked by the current repository.

$(CLI.get_stuckopt_blurb)
--
$(CLI.get_global_blurb)
"

# MARK: Command Implementation
function __cmd()
{
	local files=("$@")

	CLI.init_git
	if [ $# -lt 1 ]; then
		files=($(Git.run ls-files))
	fi

	for f in "${files[@]}"; do
		local f_trimmed=

		readlink "$f"
		if [ $? -eq 0 ]; then
			# Skip any symlinks, since they might point to directories. We rely
			# on encountering the actual symlink target while walking the tree
			# of tracked files.
			continue
		fi

		# Use perl because our BSD sed(1) will whine about invalid characters
		# potentially and then leave turd for backups even if we provide -i''.
		# perl(1) will consider the carriage return part of the match, so we
		# need to replace the expression with a single new line.
		perl -pi -e 's/[[:space:]]*$/\n/;' "$f"

		# Now trim any trailing new lines.
		f_trimmed=$(<"$f"); printf '%s\n' "$f_trimmed" > "$f"
	done
}

function __main()
{
	local me="$(basename ${BASH_SOURCE[0]})"

	CLI.init "$me" "$GIT_PARSEOPT_SPEC" "$@"
	eval "$(echo "$GIT_PARSEOPT_SPEC" |
		git rev-parse --parseopt --keep-dashdash --stuck-long -- "$@" \
				|| echo exit $?
	)"

	while [ $# -ne 0 ]; do
		local arg="$(CLI.parse_argument "$1")"
		local arg_opt=()

		case "$1" in
		--)
			shift
			break
			;;
		-*)
			# This was one of the common options that was already consumed by
			# the CLI module. git-revparse will not have normalized an
			# unrecognized option.
			shift
			;;
		*)
			break
			;;
		esac
	done

	__cmd "$@"
}

__main "$@"
