#!/bin/bash -O extglob

# Executable preamble
mydir="$(dirname $0)"
pushd "$mydir/.." > /dev/null; dotfiles="$(pwd)"; popd > /dev/null
libdir="${dotfiles}/lib"

# Imports
. "${libdir}/Lib.sh"
. "${libdir}/Module.sh"
. "${libdir}/CLI.sh"
. "${libdir}/Git.sh"

# Parsed options
GIT_PARSEOPT_SPEC="\
git-ditto [options] [SOURCE] DESTINATION -- [arguments to ditto]

ditto(1)s the tracked contents of the working git repository to DESTINATION, \
omitting the relevant git(1) dot files. If specified, only the subtree \
specified by SOURCE is used.

$(CLI.get_stuckopt_blurb)
--
$(CLI.get_global_blurb)
"

O_SRC=.
O_DST=

# MARK: Command Implementation
function __cmd()
{
	local master_bom=$(CLI.get_run_state_path "master.bom")
	local files_tracked=$(CLI.get_run_state_path "tracked")
	local lsbom_tracked=$(CLI.get_run_state_path "tracked.lsbom")
	local lsbom_final=$(CLI.get_run_state_path "final.lsbom")
	local bom_final=$(CLI.get_run_state_path "final.bom")
	local branch=
	local varg=$(CLI.get_verbosity_opt "dV")

	CLI.init_git
	branch=$(Git.get_current_branch)

	CLI.pushdir "$(Git.get_worktree)"
	CLI.pushdir "$O_SRC"

	# Pass -t so we capture the directories in the file list; they will be
	# needed by mkbom(1). We need to also include the . file to make mkbom(8)
	# happy. Follow it with a tab to make sure grep(1) doesn't match everything
	# in the lsbom(8) output.
	echo "."$'\t' > "$files_tracked"
	Git.run ls-tree -r "$branch" -t --name-only >> "$files_tracked"

	# Make a master bom of the repository, then list it with lsbom(8) and filter
	# that output based on which files are tracked. Then use that filtered
	# lsbom(8) output to create a final bom that ditto(1) will accept. We do all
	# this because ditto(1) will not accept path-only boms, which would've made
	# this easier.
	CLI.command mkbom . "$master_bom"
	CLI.command lsbom "$master_bom" | \
			grep -F -f "$files_tracked" > "$lsbom_tracked"

	# Filter out any .git* files that may be tracked (e.g. .gitattributes).
	cat "$lsbom_tracked" | grep -v '^\.\/\.git.*' > "$lsbom_final"
	CLI.command mkbom -i "$lsbom_final" "$bom_final"
	CLI.command ditto $varg --bom "$bom_final" . "$O_DST"

	CLI.popdir
	CLI.popdir
}

function __main()
{
	local me="$(basename ${BASH_SOURCE[0]})"

	CLI.init "$me" "$GIT_PARSEOPT_SPEC" "$@"
	eval "$(echo "$GIT_PARSEOPT_SPEC" |
		git rev-parse --parseopt --keep-dashdash --stuck-long -- "$@" \
				|| echo exit $?
	)"

	while [ $# -ne 0 ]; do
		local arg="$(CLI.parse_argument "$1")"
		local arg_opt=()

		case "$1" in
		--)
			shift
			break
			;;
		-*)
			# This was one of the common options that was already consumed by
			# the CLI module. git-revparse will not have normalized an
			# unrecognized option.
			shift
			;;
		*)
			break
			;;
		esac
	done

	if [ $# -lt 1 ]; then
		CLI.die_noopt "git repo and destination"
	fi

	if [ $# -ge 2 ]; then
		O_SRC="$1"
		shift
	fi

	O_DST="$1"
	shift

	__cmd "$@"
}

__main "$@"
